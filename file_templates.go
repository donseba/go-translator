package translator

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"time"
)

// POT/PO file header template struct
// You can expand this struct as needed for more fields
// See: https://www.gnu.org/software/gettext/manual/html_node/Header-Entry.html

type TranslationFileHeader struct {
	ProjectID               string
	ReportMsgidBugsTo       string
	POTCreationDate         string
	PORevisionDate          string
	LastTranslator          string
	LanguageTeam            string
	Language                string
	MIMEVersion             string
	ContentType             string
	ContentTransferEncoding string
	PluralForms             string
}

// DefaultHeader returns a default header for a given language
func DefaultHeader(language string) TranslationFileHeader {
	now := time.Now().Format("2006-01-02 15:04-0700")
	return TranslationFileHeader{
		ProjectID:               "PACKAGE VERSION",
		ReportMsgidBugsTo:       "",
		POTCreationDate:         now,
		PORevisionDate:          now,
		LastTranslator:          "",
		LanguageTeam:            "",
		Language:                language,
		MIMEVersion:             "1.0",
		ContentType:             "text/plain; charset=UTF-8",
		ContentTransferEncoding: "8bit",
		PluralForms:             "nplurals=2; plural=(n != 1);",
	}
}

// GetHeaderForLanguage returns a header template for a given language, falling back to DefaultHeader
func GetHeaderForLanguage(language string) TranslationFileHeader {
	if h, ok := LanguageHeaderTemplates[language]; ok {
		h.ProjectID = "Go-FORM"
		h.POTCreationDate = time.Now().Format("2006-01-02 15:04-0700")
		h.PORevisionDate = h.POTCreationDate
		h.LanguageTeam = "Go-FORM"
		h.Language = language
		h.ContentType = "text/plain; charset=UTF-8"
		h.ContentTransferEncoding = "8bit"
		return h
	}
	return DefaultHeader(language)
}

// WritePOTFile creates a POT file with the default header if it does not exist
func WritePOTFile(path string) error {
	if _, err := os.Stat(path); err == nil {
		return nil // file exists
	}
	h := DefaultHeader("")
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()
	_, err = f.WriteString(h.HeaderString())
	return err
}

// WritePOFile creates a PO file for a language with the default header if it does not exist
func WritePOFile(path, language string) error {
	if _, err := os.Stat(path); err == nil {
		return nil // file exists
	}
	h := DefaultHeader(language)
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()
	_, err = f.WriteString(h.HeaderString())
	return err
}

// HeaderString returns the formatted header for a PO/POT file
func (h TranslationFileHeader) HeaderString() string {
	// Ensure Language is always set and not empty
	lang := h.Language
	if lang == "" {
		lang = "C"
	}
	return fmt.Sprintf(`msgid ""
msgstr ""
"Project-Id-Version: %s\n"
"Report-Msgid-Bugs-To: %s\n"
"POT-Creation-Date: %s\n"
"PO-Revision-Date: %s\n"
"Last-Translator: %s\n"
"Language-Team: %s\n"
"Language: %s\n"
"MIME-Version: %s\n"
"Content-Type: %s\n"
"Content-Transfer-Encoding: %s\n"
"Plural-Forms: %s\n"
`,
		h.ProjectID,
		h.ReportMsgidBugsTo,
		h.POTCreationDate,
		h.PORevisionDate,
		h.LastTranslator,
		h.LanguageTeam,
		lang,
		h.MIMEVersion,
		h.ContentType,
		h.ContentTransferEncoding,
		h.PluralForms,
	)
}

// GenerateLanguageHeaderTemplatesFromJSON parses a plurals.json file and generates Go code for LanguageHeaderTemplates
func GenerateLanguageHeaderTemplatesFromJSON(jsonPath, goPath string) error {
	data, err := ioutil.ReadFile(jsonPath)
	if err != nil {
		return err
	}
	var plurals map[string]struct {
		Name     string `json:"name"`
		Formulas struct {
			Standard string `json:"standard"`
			PHP      string `json:"php"`
		} `json:"formulas"`
		Plurals int `json:"plurals"`
	}
	if err := json.Unmarshal(data, &plurals); err != nil {
		return err
	}

	out := "package translator\n\n// Code generated by script. DO NOT EDIT.\n\nvar LanguageHeaderTemplates = map[string]TranslationFileHeader{\n"
	for code, v := range plurals {
		pluralForms := "nplurals=" + itoa(v.Plurals) + "; plural=(" + v.Formulas.Standard + ");"
		out += "\t\"" + code + "\": {PluralForms: \"" + pluralForms + "\", Language: \"" + code + "\"},\n"
	}
	out += "}\n"
	return ioutil.WriteFile(goPath, []byte(out), 0644)
}

func itoa(i int) string {
	return fmt.Sprintf("%d", i)
}
